
//private const selector Sfrom = @e[tag=mcppc__from, limit=1];
//private const selector Sto = @e[tag=mcppc__to, limit=1];
	//private Vec3d posfrom -> Sfrom.Pos;
	//private Vec3d posto -> Sto.Pos;
public const coords forward = ^ ^ ^1 ;
private const coords resetpos = ^ ^ ^ ;
private const coords zeropos = 0.0 0.0 0.0 ;


//private int glb;
public<num n = 2,num m=3 .. 5> double<n> dbl(double<m> in)  export <4,6>{
	private const num en = 3;
	stopLongMult();
	return = (double<n>)in*(en);
	}
public<num n = 1 .. 6> Vec3d<n> lookAt(Entity from,Entity to,int pow) { //TESTED
	//even power of lookvec
	private Vec3d<n> posfrom -> from.Pos;
	private Vec3d<n> posto -> to.Pos;
	private Vec3d<n> diff;
	private Vec3d<n> hat;
	private double<n> scale;
	private int counter ;//-> glb;
	private int powhf = pow/2;
	diff = posto-posfrom;
	//printf("pow = %s",pow);
	//printf("powhf = %s",powhf);
	//printf("pow%%2 = %s",pow%2);
	//printf("diff = %s",diff);
	if(pow%2 ==0){
		//printf("even");
		hat = posfrom;
		execute asat(from) facing(to) {
		//execute statement does not change NBT values
			tp(@s[],forward);
			hat=posfrom-hat;
			tp(@s[],resetpos);
			//tp commands in mc only work if done once per tick; a second tp op will overwrite the first request
		}
	}else {
		//printf("odd");
		hat=diff;
	}
	//printf("hat = %s",hat);
	scale = diff * diff;
	//printf("scale = %s",scale);
	counter=0;
	while(counter!=powhf){
		if(counter<powhf) {hat = hat * scale; counter=counter+1;}
		else {hat = hat / scale; counter=counter-1;}
	}
	//printf(@p[],"lookAt() -> %s",hat);//it is still working
	return = hat;
}
public<num n = 1 .. 6> Vec3d<n> looking(Entity me) { 
	//TODO TEST
	private Entity e;
	private Vec3d<n> pos -> e.Pos;
	e.summon(zeropos);
	execute asat(e) rotated (me) {
		tp(@s[],forward);
		return = pos;
	}
	e.kill();
	
}
public<num n = 1 .. 6> Vec3d<n> Vec3d<n>.norm() final {
	//TODO test
	//TODO may be inlinable
	///i was here
	private Entity e;
	private Entity e2;
	private Vec3d<n> pos -> e.Pos;
	private Vec3d<n> pos2 -> e2.Pos;
	e.summon(zeropos);
	e2.summon(zeropos);
	pos2 = this;
	execute asat(e) facing (e2) {
		tp(@s[],forward);
		return = pos;
	}
	e.kill();
	e2.kill();
	
}
public<num n = 1 .. 6> double<n> Vec3d<n>.mag() final {//TODO test
	//TODO may be inlinable
	private Entity e;
	private Entity e2;
	private Vec3d<n> pos -> e.Pos;
	private Vec3d<n> pos2 -> e2.Pos;
	e.summon(zeropos);
	e2.summon(zeropos);
	pos2 = this;
	execute asat(e) facing (e2) {
		tp(@s[],forward);
		return = pos*this;
	}
	e.kill();
	e2.kill();
	
}

private int dbled = 2;
dbled = dbl<3,3> (dbled);

